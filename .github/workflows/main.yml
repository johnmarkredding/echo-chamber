name: Dockerized Echo Chamber API CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.0

    - name: Set up Docker
      uses: docker/setup-qemu-action@v3.0.0

    - name: Build cert-loader image
      run: docker build -t cert-loader:latest ./cert-loader

    - name: Build echo-chamber image
      run: docker build -t echo-chamber:latest .

    - name: AWS ECR Login
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }} --profile ecr-user
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }} --profile ecr-user
        aws configure set region ${{ secrets.AWS_REGION }} --profile ecr-user
        aws ecr get-login-password --profile ecr-user | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Cert-loader repo exists?
      id: cert-loader-repo-check
      run: |
        repo_name="cert-loader"
        if aws ecr describe-repositories --repository-names $repo_name 2>/dev/null; then
          echo "Repo $repo_name already exists."
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Repo $repo_name doesn't exist."
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Create cert-loader repo?
      if: steps.cert-loader-repo-check.outputs.exists != 'true'
      run: |
        aws ecr create-repository --repository-name cert-loader
      shell: bash

    - name: Echo-chamber repo exists?
      id: echo-chamber-repo-check
      run: |
        repo_name="echo-chamber"
        if aws ecr describe-repositories --repository-names $repo_name 2>/dev/null; then
          echo "Repo $repo_name already exists."
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Repo $repo_name doesn't exist."
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Create echo-chamber repo?
      if: steps.echo-chamber-repo-check.outputs.exists != 'true'
      run: |
        aws ecr create-repository --repository-name echo-chamber
      shell: bash

    - name: Set Version Tag
      id: set-version-tag
      run: |
        echo "version_tag=$(date +%y%m%w%d%H%M%S)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Tag cert-loader image
      run: |
        version_tag=${{ steps.set-version-tag.outputs.version_tag }}
        docker tag cert-loader:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/cert-loader:latest
        docker tag cert-loader:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/cert-loader:$version_tag

    - name: Tag echo-chamber image
      run: |
        version_tag=${{ steps.set-version-tag.outputs.version_tag }}
        docker tag echo-chamber:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/echo-chamber:latest
        docker tag echo-chamber:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/echo-chamber:$version_tag

    - name: Push cert-loader image to AWS ECR
      run: |
        version_tag=${{ steps.set-version-tag.outputs.version_tag }}
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/cert-loader:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/cert-loader:$version_tag

    - name: Push echo-chamber image to AWS ECR
      run: |
        version_tag=${{ steps.set-version-tag.outputs.version_tag }}
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/echo-chamber:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/echo-chamber:$version_tag